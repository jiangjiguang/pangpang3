1. @PathVariable
    当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。
        @Controller
        @RequestMapping("/owners/{ownerId}")
        public class RelativePathUriTemplateController {

          @RequestMapping("/pets/{petId}")
          public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) {
            // implementation omitted
          }
        }

    若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable("name")指定uri template中的名称。

2. @RequestHeader
    @RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。
        @RequestMapping("/displayHeaderInfo.do")
        public void displayHeaderInfo(@RequestHeader("Accept-Encoding") String encoding,
                                      @RequestHeader("Keep-Alive") long keepAlive)  {

          //...
        }

3. @CookieValue
    @CookieValue 可以把Request header中关于cookie的值绑定到方法的参数上。
        @RequestMapping("/displayHeaderInfo.do")
        public void displayHeaderInfo(@CookieValue("JSESSIONID") String cookie)  {

          //...

        }

4.@RequestParam
    A） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String--> 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；
    B）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；
    C) 该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；
     @RequestMapping(method = RequestMethod.GET)
        public String setupForm(@RequestParam("petId") int petId, ModelMap model) {
            Pet pet = this.clinic.loadPet(petId);
            model.addAttribute("pet", pet);
            return "petForm";
        }
5. @RequestBody
    该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；

6. @SessionAttributes
    该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。
    该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；

7. @ModelAttribute
    该注解有两个用法，一个是用于方法上，一个是用于参数上；
